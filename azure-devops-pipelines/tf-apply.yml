# Terraform pipeline

trigger:
  - main

variables:
  tf_version: "1.1.7" # what version of terraform should be used
  tf_state_rg: "Clash" # name of the resource group to create/use for the terraform state file
  tf_state_location: "westeurope" # location of the resource group to create/use for the terraform state file
  tf_state_sku: "Standard_LRS" # sku to use when creating the storeage account to create/use for the terraform state file
  tf_state_sa_name: "clashtfstates" # name of of the storage account to create/use for the terraform state file
  tf_state_container_name: "tfstates" # name of of the container to create/use for the terraform state file
  tf_environment: "dev" # enviroment name, used for the statefile name
  cost_increase_alert_percentage: 50 # if the difference in costs is higher than x% then you will need to manually validate the deployment

pool:
  vmImage: "ubuntu-latest"

stages:
  # Validate Terraform - uses the following ...
  # https://marketplace.visualstudio.com/items?itemName=charleszipp.azure-pipelines-tasks-terraform
  ######################################################################
  - stage: "validateTerraform"
    displayName: "Terraform - Validate"    
    jobs:
      - job: "TerraformJobs"
        displayName: "Terraform > install, init and validate"
        continueOnError: false
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: "$(tf_version)"
            displayName: "Install > terraform"

          - task: TerraformCLI@0
            inputs:
              command: "init"
              backendType: "azurerm"
              backendServiceArm: "$(SUBSCRIPTION_NAME)"
              ensureBackend: true
              backendAzureRmResourceGroupName: "$(tf_state_rg)"
              backendAzureRmResourceGroupLocation: "$(tf_state_location)"
              backendAzureRmStorageAccountName: "$(tf_state_sa_name)"
              backendAzureRmStorageAccountSku: "$(tf_state_sku)"
              backendAzureRmContainerName: $(tf_state_container_name)
              backendAzureRmKey: "$(tf_environment).terraform.tstate"
            displayName: "Run > terraform init"

          - task: TerraformCLI@0
            inputs:
              command: "validate"
              environmentServiceName: "$(SUBSCRIPTION_NAME)"
            displayName: "Run > terraform validate"

  - stage: "qualityCheckStage"
    dependsOn:      
        - "validateTerraform"
    displayName: Quality Check Stage
    jobs:
      - job: TFSecJob
        displayName: "TFSec > Pull, run and publish results of TFSec scan"
        steps:
        # TFSec uses static analysis of Terraform templates to spot potential security issues, and 
        # checks for violations of AWS, Azure and GCP security best practice recommendations.
        # NOTE: To disable a specific check from analysis, include it in the command-line as 
        # follows: -e GEN001,GCP001,GCP002
        # Documentation: https://github.com/tfsec/tfsec
        - bash: |
            mkdir TFSecReport
            docker pull aquasec/tfsec-alpine:latest
            docker run --rm -v $(System.DefaultWorkingDirectory):/src aquasec/tfsec-alpine ./src --soft-fail --include-passed --include-ignored	--format JUnit > $(System.DefaultWorkingDirectory)/TFSecReport/TFSec-Report.xml            
          failOnStderr: false
          displayName: "Pull & Run > aquasec/tfsec-alpine"
          name: TFSecScan
          condition: always()
        
        # Publish the results of the TFSec analysis as Test Results to the pipeline
        - task: PublishTestResults@2          
          condition: succeededOrFailed()
          inputs:
            testResultsFormat: 'JUnit' # Options JUnit, NUnit, VSTest, xUnit, cTest
            testResultsFiles: '**/*TFSec-Report.xml'
            searchFolder: '$(System.DefaultWorkingDirectory)/TFSecReport'
            testRunTitle: TFSec Results
            mergeTestResults: false
            failTaskOnFailedTests: false
            publishRunAttachments: true
          displayName: "Publish > TFSec scan results"

        # Clean up any of the containers / images that were used for quality checks
        - bash: |
            docker rmi "aquasec/tfsec-alpine:latest" -f | true
          displayName: 'Remove Terraform Quality Check Docker Images'
          condition: always()

      # Run Checkov, upload results and optionally halt if there any problems found
      ######################################################################      
      - job: "Checkov"
        displayName: "Checkov > Pull, run and publish results of Checkov scan"
        steps:
          - bash: |
              docker pull bridgecrew/checkov
              docker run --volume $(pwd):/tf bridgecrew/checkov --directory /tf --output junitxml --soft-fail > $(pwd)/Checkov-Report.xml
            workingDirectory: $(System.DefaultWorkingDirectory)
            failOnStderr: false
            displayName: "Pull & Run > bridgecrew/checkov"
            name: CheckovScan
            condition: always()        
  
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "Checkov-Report.xml"
              searchFolder: "$(System.DefaultWorkingDirectory)"
              testRunTitle: "Checkov Results"
              mergeTestResults: false
              failTaskOnFailedTests: false
              publishRunAttachments: true            
            displayName: "Publish > Checkov scan results"

          # Clean up any of the containers / images that were used for quality checks
          - bash: |
              docker rmi "bridgecrew/checkov:latest" -f | true
            displayName: 'Remove Terraform Quality Check Docker Images'
            condition: always()

  # Plan Terraform - uses the following ...
  # https://marketplace.visualstudio.com/items?itemName=charleszipp.azure-pipelines-tasks-terraform
  # Will set some variables to trigger a terrafrom apply automatically
  # if there are just changes or ask for approval if there are any
  # resouces which are being destroyed
  ######################################################################

  - stage: "planTerraform"
    displayName: "Terraform - Plan"
    dependsOn:
      - "qualityCheckStage"
    jobs:
      - job: "TerraformJobs"
        displayName: "Terraform > install, init & plan"
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: "$(tf_version)"
            displayName: "Install > terraform"

          - task: TerraformCLI@0
            inputs:
              command: "init"
              backendType: "azurerm"
              backendServiceArm: "$(SUBSCRIPTION_NAME)"
              ensureBackend: true
              backendAzureRmResourceGroupName: "$(tf_state_rg)"
              backendAzureRmResourceGroupLocation: "$(tf_state_location)"
              backendAzureRmStorageAccountName: "$(tf_state_sa_name)"
              backendAzureRmStorageAccountSku: "$(tf_state_sku)"
              backendAzureRmContainerName: $(tf_state_container_name)
              backendAzureRmKey: "$(tf_environment).terraform.tstate"
            displayName: "Run > terraform init"

          - task: TerraformCLI@0
            inputs:
              command: "plan"
              environmentServiceName: "$(SUBSCRIPTION_NAME)"
              publishPlanResults: "PlanResults"
              commandOptions: "-out=$(System.DefaultWorkingDirectory)/terraform.tfplan"
            name: "plan"
            displayName: "Run > terraform plan"

          - task: TerraformCLI@0
            inputs:
              command: "show"
              environmentServiceName: "$(SUBSCRIPTION_NAME)"
              inputTargetPlanOrStateFilePath: "$(System.DefaultWorkingDirectory)/terraform.tfplan"
            displayName: "Run > terraform show"

          - bash: |
              if [ -z "$(INFRACOST_API_KEY)" ]; then
                echo "ℹ️ - No Infracost API Key has been detected - skipping task"
              else
                sudo apt-get update -qq && sudo apt-get -qq install bc curl git jq bc
                curl -sL https://github.com/infracost/infracost/releases/latest/download/infracost-linux-amd64.tar.gz | tar xz -C /tmp
                sudo mv /tmp/infracost-linux-amd64 /usr/bin/infracost
              fi
            name: "installinfracost"
            displayName: "Install > Infrascost"

          - bash: |
              if [ -z "$(INFRACOST_API_KEY)" ]; then
                echo "ℹ️ - No Infracost API Key has been detected - skipping task"
              else
                mkdir $(System.DefaultWorkingDirectory)/output
                terraform show -json $(System.DefaultWorkingDirectory)/terraform.tfplan > $(System.DefaultWorkingDirectory)/output/plan.json
                infracost breakdown --format json --path $(System.DefaultWorkingDirectory)/output/plan.json > $(System.DefaultWorkingDirectory)/output/cost.json

                past_total_monthly_cost=$(jq '[.projects[].pastBreakdown.totalMonthlyCost | select (.!=null) | tonumber] | add' $(System.DefaultWorkingDirectory)/output/cost.json)
                total_monthly_cost=$(jq '[.projects[].breakdown.totalMonthlyCost | select (.!=null) | tonumber] | add' $(System.DefaultWorkingDirectory)/output/cost.json)
                diff_cost=$(jq '[.projects[].diff.totalMonthlyCost | select (.!=null) | tonumber] | add' $(System.DefaultWorkingDirectory)/output/cost.json)
                percentage_threshold=$(cost_increase_alert_percentage)

                if [ $(echo "$past_total_monthly_cost > 0" | bc -l) = 1 ] && [ $(echo "$total_monthly_cost > 0" | bc -l) = 1 ]; then
                  percent=$(echo "scale=6; $total_monthly_cost / $past_total_monthly_cost * 100 - 100" | bc)
                fi

                if [ $(echo "$past_total_monthly_cost <= 0" | bc -l) = 1 ] && [ $(echo "$total_monthly_cost <= 0" | bc -l) = 1 ]; then
                  percent=0
                fi

                if [ -z "$percent" ]; then
                  echo "##vso[task.logissue type=warning]💰 - ℹ️ No previous cost data has been detected"
                elif [ $(echo "$percent > $percentage_threshold" | bc -l) = 1 ]; then
                  echo "##vso[task.logissue type=warning]💰 - 📈 A $percent% increase in cost have be detected. Your monthly costs are increasing from \$$past_total_monthly_cost to \$$total_monthly_cost"
                  echo "##vso[task.setvariable variable=TERRAFORM_PLAN_HAS_DESTROY_CHANGES]true"
                else
                  echo "##vso[task.logissue type=warning]💰 - 📉 An acceptable or no change in cost has been detected. Your new monthly costs are \$$total_monthly_cost from \$$past_total_monthly_cost"
                fi
              fi
            env:
              INFRACOST_API_KEY: $(INFRACOST_API_KEY)
            name: "runinfracost"
            displayName: "Run > Infrascost"

          - bash: |
              if [ "$TERRAFORM_PLAN_HAS_CHANGES" = true ] && [ "$TERRAFORM_PLAN_HAS_DESTROY_CHANGES" = false ] ; then
                echo "##vso[task.setvariable variable=HAS_CHANGES_ONLY;isOutput=true]true"
                echo "##vso[task.logissue type=warning]👍 - Changes with no destroys detected, it is safe for the pipeline to proceed automatically"
                fi
              if [ "$TERRAFORM_PLAN_HAS_CHANGES" = true ] && [ "$TERRAFORM_PLAN_HAS_DESTROY_CHANGES" = true ] ; then
                echo "##vso[task.setvariable variable=HAS_DESTROY_CHANGES;isOutput=true]true"
                echo "##vso[task.logissue type=warning]⛔️ - Changes with Destroy or Cost increase, pipeline will require a manual approval to proceed"
              fi
              if [ "$TERRAFORM_PLAN_HAS_CHANGES" != true ] ; then
                echo "##vso[task.logissue type=warning]ℹ️ - No changes detected, terraform apply will not run"
              fi
            name: "setvar"
            displayName: "Vars > Set Variables for next stage"

  # Auto Approval Terraform - uses the following ...
  # https://marketplace.visualstudio.com/items?itemName=charleszipp.azure-pipelines-tasks-terraform
  # Will run the terraform apply if there are are only changes and
  # nothing to be destroyed
  ######################################################################

  - stage: "autoTerraform"
    displayName: "Terraform - Auto Approval"
    dependsOn:
      - "planTerraform"
    condition: |
      and
        (
          succeeded(),
          eq(dependencies.planTerraform.outputs['TerraformJobs.setvar.HAS_CHANGES_ONLY'], 'true')
        )
    jobs:
      - job: "TerraformAuto"
        displayName: "Terraform > install, init & apply"
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: "$(tf_version)"
            displayName: "Install > terraform"

          - task: TerraformCLI@0
            inputs:
              command: "init"
              backendType: "azurerm"
              backendServiceArm: "$(SUBSCRIPTION_NAME)"
              ensureBackend: true
              backendAzureRmResourceGroupName: "$(tf_state_rg)"
              backendAzureRmResourceGroupLocation: "$(tf_state_location)"
              backendAzureRmStorageAccountName: "$(tf_state_sa_name)"
              backendAzureRmStorageAccountSku: "$(tf_state_sku)"
              backendAzureRmContainerName: $(tf_state_container_name)
              backendAzureRmKey: "$(tf_environment).terraform.tstate"
            displayName: "Run > terraform init"
          
          - task: TerraformCLI@0
            inputs:
              command: "apply"
              environmentServiceName: "$(SUBSCRIPTION_NAME)"
            displayName: "Run > terraform apply"            
          

  # Manual Approval Terraform - uses the following ...
  # https://marketplace.visualstudio.com/items?itemName=charleszipp.azure-pipelines-tasks-terraform
  # Will wait for changes to be approved if there are any resources
  # which are  being destroyed
  ######################################################################

  - stage: "approveTerraform"
    displayName: "Terraform - Manual Approval"
    dependsOn:
      - "planTerraform"
    condition: |
      and
        (
          succeeded(),
          eq(dependencies.planTerraform.outputs['TerraformJobs.setvar.HAS_DESTROY_CHANGES'], 'true')
        )
    jobs:
      - job: "waitForValidation"
        displayName: "Wait > Wait for manual appoval"
        pool: "server"
        timeoutInMinutes: "4320" # job times out in 3 days
        steps:
          - task: ManualValidation@0
            timeoutInMinutes: 1440 # task times out in 1 day
            inputs:
              notifyUsers: |
                antoine.loizeau@hotmail.fr
              instructions: "There are resources being destroyed or the costs are increasing alot as part of this deployment, please review the output of Terraform plan before approving."
              onTimeout: "reject"

      - job: "TerraformApprove"
        displayName: "Terraform > install, init & apply"
        dependsOn: "waitForValidation"
        steps:
          - task: TerraformInstaller@0
            inputs:
              terraformVersion: "$(tf_version)"
            displayName: "Install > terraform"

          - task: TerraformCLI@0
            inputs:
              command: "init"
              backendType: "azurerm"
              backendServiceArm: "$(SUBSCRIPTION_NAME)"
              ensureBackend: true
              backendAzureRmResourceGroupName: "$(tf_state_rg)"
              backendAzureRmResourceGroupLocation: "$(tf_state_location)"
              backendAzureRmStorageAccountName: "$(tf_state_sa_name)"
              backendAzureRmStorageAccountSku: "$(tf_state_sku)"
              backendAzureRmContainerName: $(tf_state_container_name)
              backendAzureRmKey: "$(tf_environment).terraform.tstate"
            displayName: "Run > terraform init"

          - task: TerraformCLI@0
            inputs:
              command: "apply"
              environmentServiceName: "$(SUBSCRIPTION_NAME)"
            displayName: "Run > terraform apply" 